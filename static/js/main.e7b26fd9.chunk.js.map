{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","click1","state","weight1","weight2","setState","score","numCorrect","numTries","outcome","updateStats","loadPokemon","click2","message","pic1","pic2","name1","name2","p1_id","Math","floor","random","p2_id","fetch","response1","json","json1","weight","sprites","front_default","name","response2","json2","react_default","a","createElement","className","align","src","onClick","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7b26fd9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n      super();\n      this.state = { \n        numCorrect: 0,\n        numTries: 0,\n        score: 0,\n        pic1: \"\",\n        pic2: \"\",\n        weight1: 0,\n        weight2: 0,\n        name1: \"\",\n        name2: \"\",\n        message: \"\",\n        outcome: \"\"\n      };\n    }\n\n  click1 = () => {\n    if (this.state.weight1 > this.state.weight2) {\n      this.setState({\n        score: ((this.state.numCorrect + 1) * 100 / (this.state.numTries + 1)),\n        numCorrect: this.state.numCorrect + 1,\n        outcome: \"correct!\"\n      })\n    } else {\n      this.setState({\n        score: (this.state.numCorrect * 100 / (this.state.numTries + 1)),\n        outcome: \"incorrect!\"\n      })\n    }\n    this.updateStats();\n    this.loadPokemon();\n  }\n\n  click2 = () => {\n    if (this.state.weight2 > this.state.weight1) {\n      this.setState({\n        score: ((this.state.numCorrect + 1) * 100 / (this.state.numTries + 1)),\n        numCorrect: this.state.numCorrect + 1,\n        message: \"correct!\"\n      })\n    } else {\n      this.setState({\n        score: (this.state.numCorrect * 100 / (this.state.numTries + 1)),\n        message: \"cncorrect!\"\n      })\n    }\n   \n    this.updateStats();\n    this.loadPokemon();\n  }\n\n  updateStats() {\n    this.setState({\n      message: this.state.name1 + \" weighs \" + this.state.weight1 + \" pounds and \" + this.state.name2 + \" weighs \" + this.state.weight2 + \" pounds.\",\n      numTries: this.state.numTries + 1\n    })\n  }\n\n  async loadPokemon() {\n    const p1_id = Math.floor(Math.random() * 387);\n    let p2_id = Math.floor(Math.random() * 387);\n    while (p1_id == p2_id) {\n      p2_id = Math.floor(Math.random() * 387);\n    }\n\n    const response1 = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + p1_id + \"/\");\n    const json1 = await response1.json();\n    this.setState({\n      weight1: json1.weight,\n      pic1: json1.sprites.front_default,\n      name1: json1.name\n    });\n\n    const response2 = await fetch(\"https://pokeapi.co/api/v2/pokemon/\" + p2_id + \"/\");\n    const json2 = await response2.json();\n    this.setState({\n      weight2: json2.weight,\n      pic2: json2.sprites.front_default,\n      name2: json2.name\n    });\n  }\n\n  async componentDidMount() {\n    this.loadPokemon();\n  }\n\n  render() {\n    return (\n      <div className=\"font\">\n        <div className=\"header\">\n          which pokemon is heavier?\n        </div>\n\n        <div className=\"name-row\">\n          <div className=\"name\">\n            {this.state.name1}\n          </div>\n          <div className=\"name\">\n            {this.state.name2}\n          </div>\n        </div>\n\n        <div className=\"pokemon-row\">\n          <div className=\"pokemon\" align=\"center;\">\n            <img src={this.state.pic1} />\n          </div>\n          <div className=\"pokemon\" align=\"center;\">\n            <img src={this.state.pic2} />          \n          </div>\n        </div>\n\n        <div className=\"button-row\">\n          <button className='button' onClick={this.click1}>\n              this one!\n          </button>\n\n          <button className=\"button\" onClick={this.click2}>\n              this one!\n          </button>\n        </div>\n\n        <div className=\"score\">\n            score: {this.state.score.toFixed(0) + \"% \"}\n            &nbsp;\n            &nbsp;\n            tries: {this.state.numTries}\n        </div>\n\n        <div className=\"outcome\">\n          {this.state.outcome}\n        </div>\n\n        <div className=\"message\">\n          {this.state.message}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}